[{"title":"TCP、UDP、Port、Socket 温故知新","date":"2019-03-25T08:17:45.000Z","path":"2019/03/25/TCP/","text":"TCP、UDP、Port、Socket 温故知新0.序本文主要参考：http://www.steves-internet-guide.com/tcpip-ports-sockets/ 是迄今见过讲解最易懂的文章。 1 TCP、UDP的区别TCP与UDP是传输层的协议，其上一层是应用层。 在package层面，TCP与UDP的封包的头有所不同。 在很多资料中，都有提到TCP与UDP的区别： 1） TCP的特征 其中，对于“Connection-Oriented”的理解，参考WIki百科（https://en.wikipedia.org/wiki/Connection-oriented_communication）： Connection-oriented communication is a network communication mode in telecommunications and computer networking, where a communication session or a semi-permanent connection is established before any useful data can be transferred, and where a stream of data is delivered in the same order as it was sent[citation needed]. 面向连接的通信方式在数据传输之前，需要先establish a connection。这也就意味着，在 1netstat -ano 命令查看到的连接，将是TCP的连接。 一个输出结果示例： 12345678910111213141516171819202122232425262728C:\\Users\\Clark&gt;netstat -ano活动连接 协议 本地地址 外部地址 状态 PID TCP 0.0.0.0:135 0.0.0.0:0 LISTENING 524 TCP 0.0.0.0:443 0.0.0.0:0 LISTENING 6748 TCP 0.0.0.0:445 0.0.0.0:0 LISTENING 4 TCP 0.0.0.0:902 0.0.0.0:0 LISTENING 4972 TCP 0.0.0.0:912 0.0.0.0:0 LISTENING 4972 TCP 0.0.0.0:5040 0.0.0.0:0 LISTENING 7236 TCP 0.0.0.0:5357 0.0.0.0:0 LISTENING 4 TCP 0.0.0.0:11301 0.0.0.0:0 LISTENING 6692 TCP 0.0.0.0:20831 0.0.0.0:0 LISTENING 8788 TCP 0.0.0.0:49664 0.0.0.0:0 LISTENING 648 TCP 0.0.0.0:49665 0.0.0.0:0 LISTENING 1544 TCP 0.0.0.0:49666 0.0.0.0:0 LISTENING 1768 TCP 0.0.0.0:49667 0.0.0.0:0 LISTENING 2896 TCP 0.0.0.0:49668 0.0.0.0:0 LISTENING 3188 TCP 0.0.0.0:49669 0.0.0.0:0 LISTENING 796 TCP 0.0.0.0:49708 0.0.0.0:0 LISTENING 772 TCP 0.0.0.0:50054 0.0.0.0:0 LISTENING 13104 TCP 127.0.0.1:443 127.0.0.1:52734 ESTABLISHED 6748 TCP 127.0.0.1:443 127.0.0.1:53039 ESTABLISHED 6748 TCP 127.0.0.1:4300 0.0.0.0:0 LISTENING 13104 TCP 127.0.0.1:4301 0.0.0.0:0 LISTENING 13104 TCP 127.0.0.1:5939 0.0.0.0:0 LISTENING 3720 TCP 172.254.40.135:53702 172.20.30.83:3389 ESTABLISHED 22664 从上图可以看出，本机的一些端口处于侦听状态（Listening），有些端口处于连接状态（Established）。 例如最后一行，172.254.40.135作为客户端连接到172.20.30.183的3389端口。 通过数字的大小，可以初步判断相对应的客户端和服务端。 2） UDP的特征 UDP是一种Try Best Effort尽力传输的方式，不保证数据的可靠传输，丢了就丢了。 在传输之前，是不需要事先建立连接的。 UDP适用于传输少量数据，对于可靠性要求不高的环境，例如ping来检查网络的连通性，发送的就是UDP报文。 且因为UDP不需要握手建立连接以及ACK确认包的传输情况，所以传输速度很快，例如QQ传文件使用的就是UDP。 TCP适用于传输大量的数据，且对可靠性要求较高的环境。 2 Port 端口分布特征首先思考一个问题：为什么要有端口？ 为什么光有IP地址不行？ IP地址相当于是网络中的计算机的身份中，是用来进行身份识别的标记。 如果主机中运行了多个应用程序，客户端将如何识别这些不同的服务呢？这个时候，采用的是端口的机制。 引用一段描述： The use of ports allow computers/devices to run multiple services/applications*.* TCP/IP协议的端口是有其特征的： 服务端与客户端的端口的使用是有差异的，对于服务器端而言，一般使用的是永久的端口，不会随着请求的变化而变化，而客户端而言，使用的是临时端口 TCP与UDP在Header中，有2个字节标志Port Number，因此其范围是0~65535 一般情况下，服务端的端口需要被广而告之，这样客户端才能使用其服务。 关于端口的一段描述如下： Port numbers 0-1023 – Well known ports. These are allocated to server services by the Internet Assigned Numbers Authority (IANA). e.g Web servers normally use port 80 and SMTP servers use port 25 (see diagram above). Ports 1024-49151- Registered Port -These can be registered for services with the IANA and should be treated as semi-reserved. User written programs should not use these ports. Ports 49152-65535– These are used by client programs and you are free to use these in client programs. When a Web browser connects to a web server the browser will allocate itself a port in this range. Also known as ephemeral ports. TCP与UDP的端口号是完全分离的。 一些比较有意思的现象： 有的服务需要占用相同协议的不同端口：FTP TCP/20 (data)，TCP/21 (control) 有的服务不同协议的相同端口：DNS TCP/53（zone transfer）,UDP/53 (client query) 知名的UDP服务端口，包括TFTP、DHCP协议等。 3 Socket的认识精华：Socket = IP + Port A connection between two computers uses a socket. 2台主机之间进行连接，使用的是socket。可以将连接认为是2端的Socket之间的连接。 在许多的编程语言中，Socket也是编程应用的对象。 4 netstat的使用方法Linux和Windows中，都有netstat命令，现在以Windows为例。 对于netstat的命令的使用，参考如下的连接：How to read NETSTAT -AN results 可以看出主机的侦听的端口以及连接的远程端口的情况。","tags":[]},{"title":"VSCode与Git联合使用方法","date":"2019-03-21T05:44:54.000Z","path":"2019/03/21/VSCode与Git联合使用方法/","text":"VSCode与Git联合使用方法1 Git的安装在Windows环境下，可以安装Git的可执行文件来获得Git环境。可以直接Google Git的官网，下载最新版本的程序，按照prompt一一安装即可。 1）git config全局配置123git config --global user.name \"name\"git config --global user.email \"name@qq.com\" 最终配置，将会保存在文件 .gitconfig中。如下: 1234$ cat ~/.gitconfig[user] name = wuxinhong email = wuxinhong@somesite.com.cn 注入其他的全局配置，如http.proxy代理等，都可以使用相类似的方法进行设置。 在指定目录下启动Gitbash的方法为：在窗口区，点击右键，单击Git bash Here 2) git clone URL地址因为公司的码云仓库需要进行鉴权，经过一番摸索后，发现要在 git clone中指定username，才能成功下载代码。 命令的格式如下： 1git clone http://wuxinhong@code.cmschina.com.cn/zdcpkfz/recomsystem.git 本质上，是在原先的HTTP的地址中，增加了username 原始的URL地址是：http://code.cmschina.com.cn/zdcpkfz/recomsystem.git 2 VSCode上库流程1）打开git代码目录下载完Git仓库后，会有一个文件夹.git生成，这个目录将会被VSCode识别。 2）修改代码在VSCode中修改代码后，在工程中将会出现Change提示符号，如下图所示： 3）提交修改提交修改时，可以直接点击提交按钮，会提示添加Commit信息。然后再点击...push到对应的分支，如下图所示： 3 Pull Request的玩法首先需要认识到：git clone下载下来的是全套的代码，包含所有的分支，因此可以使用git checkout branch 来进行分支的切换。 因此，在开发时，切换到dev分支，并且将代码上库到dev分支。然后在GitHub中提起Pull Request。","tags":[]},{"title":"Python 调试技巧","date":"2019-03-20T05:28:57.000Z","path":"2019/03/20/Python-调试技巧/","text":"Python 调试技巧1 pdb 单步跟踪类似Go/C语言的gdb，python也存在一个类似的单步调试器：pdb。 可以使用类似的用法，对Python程序进行调试。 启动pdb调试命令： 1python -m pdb file.py 2 python 函数原型C语言系统API，在Linux下，可以使用man 命令快速的查看函数的原型，例如： man strcpy 12345678910111213141516171819202122232425262728293031323334STRCPY(3) Linux Programmer's Manual STRCPY(3)NAME strcpy, strncpy - copy a stringSYNOPSIS #include &lt;string.h&gt; char *strcpy(char *dest, const char *src); char *strncpy(char *dest, const char *src, size_t n);DESCRIPTION The strcpy() function copies the string pointed to by src, including the terminating null byte ('\\0'), to the buffer pointed to by dest. The strings may not overlap, and the destination string dest must be large enough to receive the copy. Beware of buffer overruns! (See BUGS.) The strncpy() function is similar, except that at most n bytes of src are copied. Warning: If there is no null byte among the first n bytes of src, the string placed in dest will not be null-terminated. If the length of src is less than n, strncpy() writes additional null bytes to dest to ensure that a total of n bytes are written. A simple implementation of strncpy() might be: char * strncpy(char *dest, const char *src, size_t n) &#123; size_t i; for (i = 0; i &lt; n &amp;&amp; src[i] != '\\0'; i++) dest[i] = src[i]; for ( ; i &lt; n; i++) dest[i] = '\\0'; return dest; &#125; ​ 在Python语言系统中，使用：pydoc ​ 例如，想查看json的dumps接口原型，可以输入：pydoc json.dumps ​ 会有如下的提示： 1234567891011121314151617181920212223242526272829303132333435363738394041424344 Help on function dumps in json:json.dumps = dumps(obj, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, cls=None, indent=None, separators=None, encoding='utf-8', default=None, sort_keys=False, **kw) Serialize ``obj`` to a JSON formatted ``str``. If ``skipkeys`` is true then ``dict`` keys that are not basic types (``str``, ``unicode``, ``int``, ``long``, ``float``, ``bool``, ``None``) will be skipped instead of raising a ``TypeError``. If ``ensure_ascii`` is false, all non-ASCII characters are not escaped, and the return value may be a ``unicode`` instance. See ``dump`` for details. If ``check_circular`` is false, then the circular reference check for container types will be skipped and a circular reference will result in an ``OverflowError`` (or worse). If ``allow_nan`` is false, then it will be a ``ValueError`` to serialize out of range ``float`` values (``nan``, ``inf``, ``-inf``) in strict compliance of the JSON specification, instead of using the JavaScript equivalents (``NaN``, ``Infinity``, ``-Infinity``). If ``indent`` is a non-negative integer, then JSON array elements and object members will be pretty-printed with that indent level. An indent level of 0 will only insert newlines. ``None`` is the most compact representation. Since the default item separator is ``', '``, the output might include trailing whitespace when ``indent`` is specified. You can use ``separators=(',', ': ')`` to avoid this. If ``separators`` is an ``(item_separator, dict_separator)`` tuple then it will be used instead of the default ``(', ', ': ')`` separators. ``(',', ':')`` is the most compact JSON representation. ``encoding`` is the character encoding for str instances, default is UTF-8. ``default(obj)`` is a function that should return a serializable version of obj or raise TypeError. The default simply raises TypeError. If *sort_keys* is true (default: ``False``), then the output of dictionaries will be sorted by key. To use a custom ``JSONEncoder`` subclass (e.g. one that overrides the ``.default()`` method to serialize additional types), specify it with the ``cls`` kwarg; otherwise ``JSONEncoder`` is used. 3 python 包查找库​ 类似于Go语言的Godoc，Python也有类似的网站：https://pypi.org/ ​ ​","tags":[]},{"title":"Golang 抓包分析MySQL的数据传输过程","date":"2019-03-19T06:20:43.000Z","path":"2019/03/19/Untitled/","text":"抓包分析MySQL的数据传输过程1）一段完整的data/sql代码1234567891011121314151617181920212223242526272829303132333435import ( \"fmt\" \"database/sql\" _ \"github.com/go-sql-driver/mysql\")func main() &#123; dbName := \"root:root@tcp(192.168.133.128:3306)/monitor?charset=utf8\" dbConn, err := sql.Open(\"mysql\", dbName) if err != nil &#123; fmt.Println(err.Error()) return &#125; stmtIn, err := dbConn.Prepare(\"Select count(*) from process\") if err != nil&#123; fmt.Println(\"Prepare Fail\") return &#125; fmt.Println(\"Prepare Success\") var count int err = stmtIn.QueryRow().Scan(&amp;count) if err != nil &amp;&amp; err != sql.ErrNoRows &#123; return &#125; fmt.Println(\"count = \",count) defer stmtIn.Close()&#125; 代码运行结果如下： 1234D:\\workspace\\go\\src\\tryme\\sqlλ go run .Prepare Successcount = 2 2）接口API规范文档3）报文交互整个过程的报文截图： 报文序号：1~3 经典的TCP连接建立过程，需要经过三次握手。 说明MySQL建立的是TCP的连接。 报文序号：4~7 第4号报文，MySQL服务器向客户端发送了一个问候，需要客户端验明正身。 第5号报文，Client端将账号与密码以及请求的数据库名发送到服务端，其中密码是加密传输的过程。 第7号报文表示验证通过。 报文序号：8~11 第8号报文设置读取的编码格式，此处为UTF-8。 第10号报文是执行Prepare Command的过程，向服务端请求连接准备，此时服务端将从连接池中选择1个连接。 第11号报文，服务端将选择好的连接信息（连接池ID）发送到客户端，此时客户端可以使用这个连接池进行数据库的操作。 报文序号：12~13 报文12，客户端根据拿到的数据库连接，执行响应的数据库操作： 报文13，服务端将查询结果返回到客户端。 4）总结 MySQL 在传输时使用的是TCP连接，通过三次握手建立连接。 MySQL在执行SQL过程中，使用的是MySQL自有协议，且为应用层协议。 真正与数据库连接是从Prepare之后开始的，而不是sql.Open。 Prepare真正意图是从MySQL中申请到一个数据库连接。","tags":[]},{"title":"Golang json && mysql Data Transfer","date":"2019-03-19T06:02:33.000Z","path":"2019/03/19/Golang-json-mysql-Data-Transfer/","text":"Golang: json &amp;&amp; mysql Data Transfer1 数据流转图​ 在常见的MVC的框架中，涉及到前端UI，后台服务，数据库存储三大块。从编程语言上看，前端使用JavaScript下发JSON数据，后台使用Golang（本项目是Golang）接收前端下发的数据，并将数据存储到MySQL的数据库中。 ​ 整个数据流转关系如下： ​ 2 Client To Server​ UI 层使用的是JSON，支持数字、字符串、布尔型。JSON本身就是JavaScript Object，因此在JS端，所有的数据都是Number、Boolean、String 这三种类型。 ​ 比较幸运，这几种数据类型在常规的编程语言中，都是包含的，如Golang。那么如何来接收从UI端下发的JSON Object，此时需要在Golang中创建一个对应的结构体。 创建1个Struct，建立成员变量名与json目标key的映射关系 JS端下发如下一段JSON： 1234567891011121314&#123; \"network_id\":\"1\", \"network_src_ip\":\"127.0.0.1\", \"network_dst_ip\":\"127.0.0.1\", \"network_dst_port\":3306, \"network_desc\":\"MySQL\", \"network_status\":1, \"network_time_available\":\"2018-07-20T14:42:26+08:00\", \"network_time_unavailable\":\"1970-01-01T08:00:01+08:00\", \"network_group\":0, \"network_alarm_lasttime\":\"1970-01-01T08:00:01+08:00\", \"network_failed_cnt\":0, \"network_disabled\":true&#125; 在Golang中建立如下的结构体，为每个接口体成员打上Tag：JSON Tag中的标签，则表示在JSON中的key 1234567891011121314type PortMonitor struct &#123; ID string `json:\"network_id\"` SrcIP string `json:\"network_src_ip\"` DstIP string `json:\"network_dst_ip\"` DstPort int `json:\"network_dst_port\"` Desc string `json:\"network_desc\"` Status int `json:\"network_status\"` TimeOK time.Time `json:\"network_time_available\"` TimeFail time.Time `json:\"network_time_unavailable\"` Group int `json:\"network_group\"` TimeAlarm time.Time `json:\"network_alarm_lasttime\"` FailCnt int `json:\"network_failed_cnt\"` Disable bool `json:\"network_disabled\"`&#125; json.Unmarshal 完成转换 数据到达服务端时的格式是：[]byte 1234567891011121314151617func CreateProcMonitor(w http.ResponseWriter, r *http.Request, p httprouter.Params) &#123; logger.I(\"call CreateProcMonitor\") res, _ := ioutil.ReadAll(r.Body) uBody := &amp;process.ProcessMonitor&#123;&#125; if err := json.Unmarshal(res, uBody); err != nil &#123; common.SendErrorResponse(w, common.ErrorRequestBodyParseFailed) return &#125; if err := process.DBAddProcMonitorInfo(uBody); err != nil &#123; common.SendErrorResponse(w, common.ErrorDBError) return &#125; common.SendNormalResponse(w, \"Create ProMonitor Info Success\", http.StatusCreated)&#125; 使用函数json:Unmarshal则可以完成JSON结构体向Struct结构体的转换，转换时按照Tag将JSON中的key与Struct中的成员变量名称相对应。 3 Server To DB 从Web服务端调用数据库API执行写库的操作，关键的函数为： 12345678910111213sqlClause := `INSERT INTO network (network_id, network_src_ip, network_dst_ip, network_dst_port, network_desc, network_time_available, network_disabled) VALUES (?, ?, ?, ?, ?, ?, ?)` logger.I(\"sqlClause Insert:%s\", sqlClause) stmtIns, err = dbConn.Prepare(sqlClause) if err != nil &#123; return err &#125; _, err = stmtIns.Exec(portInfo.ID, portInfo.SrcIP, portInfo.DstIP, portInfo.DstPort, portInfo.Desc, portInfo.TimeOK, portInfo.Disable) if err != nil &#123; return err &#125; 核心函数为：stmtIns.Exec 通过实验，证明Exec的参数传递时，支持传统的整型，布尔型，String、time.Time类型等。 4 DB To Server 在数据库中存储的数据，通过接口读取到Go语言中，常用代码如下： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546func DBGetPortMonitorList(stmt string) ([]*PortMonitor, error) &#123; logger.T(\"Enter Func: DBGetPortMonitorList\") stmtOut, err := dbConn.Prepare(stmt) var res []*PortMonitor if err != nil &#123; return res, err &#125; rows, err := stmtOut.Query() if err != nil &#123; return res, err &#125; defer stmtOut.Close() for rows.Next() &#123; var network_id, network_src_ip, network_dst_ip, network_desc string var network_dst_port, network_status, network_failed_cnt int var network_time_available, network_time_unavailable, network_alarm_lasttime time.Time var network_disabled bool if err := rows.Scan(&amp;network_id, &amp;network_src_ip, &amp;network_dst_ip, &amp;network_dst_port, &amp;network_desc, &amp;network_status, &amp;network_time_available, &amp;network_time_unavailable, &amp;network_alarm_lasttime, &amp;network_failed_cnt, &amp;network_disabled); err != nil &#123; return res, nil &#125; pm := &amp;PortMonitor&#123; ID: network_id, SrcIP: network_src_ip, DstIP: network_dst_ip, DstPort: network_dst_port, Desc: network_desc, Status: network_status, TimeOK: network_time_available, TimeFail: network_time_unavailable, TimeAlarm: network_alarm_lasttime, FailCnt: network_failed_cnt, Disable: network_disabled, &#125; res = append(res, pm) &#125; return res, nil&#125; 获取数据的关键接口是：rows.Scan 通过实验，证明Scan的参数传递时，支持传统的整型，布尔型，String、time.Time类型等。 4 Server To Client 从Golang中将数据返回到客户端，如下代码所示： 1234567891011121314151617181920func GetProcMonitorList(w http.ResponseWriter, r *http.Request, p httprouter.Params) &#123; logger.I(\"call GetProcMonitorList\") stmt := `SELECT id, process_ip, process_name, process_cnt, process_execmd, process_name_find,process_enable_lanch, process_enable_alarm,process_alarm_time,process_groupid,process_switch FROM process` pm, err := process.DBGetProcMonitorList(stmt) if err != nil &#123; logger.E(\"Error When GetProcMonitorList\") common.SendErrorResponse(w, common.ErrorDBError) return &#125; if resp, err := json.Marshal(pm); err != nil &#123; common.SendErrorResponse(w, common.ErrorInternalFaults) return &#125; else &#123; common.SendNormalResponse(w, string(resp), 200) &#125;&#125; 核心的函数是：json.Marshal 这个函数将Struct结构体转变成JSON encode。 通过实验，证明json.Marshal转换后，传递到前端支持传统的整型，布尔型，String、time.Time类型等。 5 time.Time的使用注意事项 对于MySQL的驱动而言，使用Scan方法默认读取到的是[]byte 如果要使得MySQL驱动支持time.Time，需要设置DSN（Data Source Name）parseTime=true。 格式如下： source=root:root@tcp(192.168.133.128:3306)/monitor?loc=Local&amp;parseTime=true&amp;charset=utf8 The default internal output type of MySQL DATE and DATETIME values is []byte which allows you to scan the value into a []byte, string or sql.RawBytes variable in your program. However, many want to scan MySQL DATE and DATETIME values into time.Time variables, which is the logical equivalent in Go to DATE and DATETIME in MySQL. You can do that by changing the internal output type from []byte to time.Time with the DSN parameter parseTime=true. You can set the default time.Time location with the loc DSN parameter. Caution: As of Go 1.1, this makes time.Time the only variable type you can scan DATE and DATETIME values into. This breaks for example sql.RawBytes support. Alternatively you can use the NullTime type as the scan destination, which works with both time.Time and string / []byte. 6 总结 从接口调用的角度： 在设计golang中的结构体时，按照常规的字段的类型声明就可以。 另外，对于time.Time数据类型，要注意NULL默认值，如果数据库中存储的值为NULL，则会提示如下的错误： 1sql: Scan error on column index 6, name \"network_time_available\": unsupported Scan, storing driver.Value type &lt;nil&gt; into type *time.Time","tags":[]},{"title":"Qiniu Image Upload","date":"2019-03-16T13:50:00.000Z","path":"2019/03/16/hello-world/","text":"this article is for uploading imageWelcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.","tags":[]},{"title":"Hexo搭建个人博客站点のSpecil Tips","date":"2019-03-16T06:14:28.000Z","path":"2019/03/16/test-my-site/","text":"Hexo搭建个人博客站点のSpecil Tips1 序言​ Hexo是非常流行的个人站点博客引擎，易学易学，社区教程也非常丰富。 ​ 搭建的教程基本上也是属于手把手级别的，很容易上手。 ​ 本文主要汇总在搭建过程中，自认为比较重要的事项进行记录，方便后续查看。 ​ 关键点： 本文实际采用的网站使用GitHub托管 hexo-admin-qiniu需要结合七牛图床使用 域名解析与CNAME配置文件相结合 2 流程介绍​ 在搭建过程中，主要是参照如下链接： ​ 其中重点参考了从“获得个人网站域名”到“绑定域名”这段过程，主题采用的是BlueLake。 ​ 从选用蓝湖主题开始，参考的是如下的步骤： 3 Special Tips(1) 站点服务器选择​ 国内已经有比较多的云服务器可以选择，如阿里云，腾讯云，华为云等，但是需要注意：如果使用国内的服务器进行网站的搭建，需要对服务器进行许可认证， ​ 即ICP备案。也可以使用国外的服务器，不需要对服务器进行备案。 ​ 本文采用的是vultr服务器，月租相对比较便宜，目前看运行还是比较稳定的。 (2) 每次Deploy时都需要输入密码​ 按照教程，在GitHub的SSH Key的设置界面，将服务器生成的公钥部署完毕。在真正部署时，还是需要输入密码，操作起来非常不便。 ​ 查阅资料后，将根config文件的repo属性进行了如下的更改： 1234deploy: type: git repo: git@github.com:XinhongWu/xinhongwu.github.io.git branch: master ​ 配置完成后，则可以不需要输入密码，即可完成GitHub的推送。 (3) 域名解析CNAME​ 由于网站托管到GitHub上，因此可以使用 github.io格式的网址对网站进行访问。 ​ 对于新申请的域名，需要做一个域名解析的配置，详细配置如下： ​ ​ 需要配置一个CNAME类型和A类型的解析方式。 ​ 光解析到GitHub地址还不够，必须要让GitHub能鉴权通过新注册的域名，因此，需要在博客的source目录下配置一个CNAME文件： ​ ​ 最终会被解析到GitHub的如下位置： ​ (4) 中文标题乱码​ 原因是根config的文件编码格式不是UTF-8，导致推送后显示乱码。 ​ 解决办法：使用Notepad将其编码修改为UTF-8即可。 (5) 设置第三方评论​ 在原生的代码中，有不少的博客评论系统可以选择，如下所示： 12345678910#Cmmentscomment: duoshuo: #chaooo ## duoshuo_shortname disqus: ## disqus_shortname livere: MTAyMC80MzIxNC8xOTc2MA== ## 来必力(data-uid) uyan: ## 友言(uid) cloudTie: ## 网易云跟帖(productKey) changyan: ## 畅言需在下方配置两个参数，此处不填。 appid: ## 畅言(appid) appkey: ##畅言(appkey) ​ 实际发现网易云跟帖已经停止服务了，畅言在申请时需要有网站的备案号，因此本文实际使用的是来必力。 ​ （国外的服务器，不需要在国内备案，畅言可以尝试将没有申请过的备案号输入后申请）。 ​ 注意：来必力的ID可以在data-id中找到，如下所示： ​ (6) 设置代码高亮​ 实际写MD发现，代码并未按照自己的需求高亮，查找资料后发现，还需要额外再添加一个设置： ​ 参考：http://www.mdslq.cn/archives/7266c682.html ​ 在主题config文件中，添加如下的一行： 1highlight_theme: normal (7) 七牛云图片直传​ 七牛云为新用户提供10GB的云存储空间，足够使用，如果每次都将图片上传到七牛图床，然后粘贴链接，步骤非常的繁琐， ​ 因此尝试寻找自动粘贴后变成链接的工具。 ​ 在知乎的问答中： ​ 找到一个插件 hexo-admin-qiniu，可以方便图片的插入。可以按照如下的步骤来进行： ​ 步骤1：在七牛中建立一个存储空间（Bucket），地区一定要选择华东！一定要选择华东！一定要选择华东！，如下所示： ​ ​ 图中的标记部分，在后序会用到：BucketHost ​ 步骤2:安装 hexo-admin-qiniu插件 ​ 按照如下的教程，安装好插件：http://lazyboy.site/hexo-admin-qiniu/ ​ 在根config文件中，配置好七牛的图床，一个参考的配置如下： 1234567admin: qiniuCfg: imageslim: true # 启动图片瘦身，仅华东区bucket可以使用 AccessKey: 'qS-9v53dFGLjk8KVoyFpx587inU36quVSE4jl2-V' SecretKey: 'cM_HQcu17tXg8jVoP07i0UiuxifmiDmJSdUxZHvc' BucketName: 'blogmd' bucketHost: 'pogngdcwy.bkt.clouddn.com' ​ ​ 步骤3:启动服务，在Windows中可以直接访问hexo-admin。 ​ 在hexo-admin中，随意打开一篇文章，将图片粘贴，则会自动生成一个链接，在MarkDown编辑器中，直接粘贴此链接即可。 ​ ​ 同时，在七牛的后台可以看到刚才操作中产生的图片： ​ (8) 设置hexo-admin开机启动​ Ubuntu 18.10与早期的系统有差异，开机启动项目的管理，使用的是Systemd，不再是initd系统。 ​ 配置起来也比较简单，因为存在如下的功能： ​ The rc-local.service already exists in systemd and the service file suggests that the rc.local, if it exists and is executable, gets pulled automatically into multi-user.target ​ 也就是说rc.local将会被系统默认启动。参考链接： ​ https://askubuntu.com/questions/886620/how-can-i-execute-command-on-startup-rc-local-alternative-on-ubuntu-16-10 ​ 示例，在rc.local中添加如下的执行语句： 123#!/bin/bashcd /home/cms/blog;hexo server &amp;exit 0 ​ 然后reboot，则会发现hexo程序在后台执行。 123root@vultr:~# ps -ef | grep hexoroot 645 1 9 21:44 ? 00:00:02 hexoroot 953 936 0 21:44 pts/0 00:00:00 grep --color=auto hexo","tags":[]}]