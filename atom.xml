<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>在路上</title>
  
  <subtitle>修心养性，健体强身，终生学习！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-03-21T05:45:08.443Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Clark Wu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>VSCode与Git联合使用方法</title>
    <link href="http://yoursite.com/2019/03/21/VSCode%E4%B8%8EGit%E8%81%94%E5%90%88%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2019/03/21/VSCode与Git联合使用方法/</id>
    <published>2019-03-21T05:44:54.000Z</published>
    <updated>2019-03-21T05:45:08.443Z</updated>
    
    <content type="html"><![CDATA[<h4 id="VSCode与Git联合使用方法"><a href="#VSCode与Git联合使用方法" class="headerlink" title="VSCode与Git联合使用方法"></a>VSCode与Git联合使用方法</h4><h5 id="1-Git的安装"><a href="#1-Git的安装" class="headerlink" title="1 Git的安装"></a>1 Git的安装</h5><p>在Windows环境下，可以安装Git的可执行文件来获得Git环境。可以直接Google Git的官网，下载最新版本的程序，按照prompt一一安装即可。</p><h6 id="1）git-config全局配置"><a href="#1）git-config全局配置" class="headerlink" title="1）git config全局配置"></a>1）git config全局配置</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">"name"</span></span><br><span class="line"></span><br><span class="line">git config --global user.email  <span class="string">"name@qq.com"</span></span><br></pre></td></tr></table></figure><p>最终配置，将会保存在文件 <code>.gitconfig</code>中。如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ cat ~/.gitconfig</span><br><span class="line">[user]</span><br><span class="line">        name = wuxinhong</span><br><span class="line">        email = wuxinhong@somesite.com.cn</span><br></pre></td></tr></table></figure><p>注入其他的全局配置，如http.proxy代理等，都可以使用相类似的方法进行设置。</p><p>在指定目录下启动Gitbash的方法为：在窗口区，点击右键，单击<strong>Git bash Here</strong></p><p><img src="http://pogngdcwy.bkt.clouddn.com/1553087522877741tqn2j.png?imageslim" alt="paste image"></p><h6 id="2-git-clone-URL地址"><a href="#2-git-clone-URL地址" class="headerlink" title="2) git clone URL地址"></a>2) git clone URL地址</h6><p>因为公司的码云仓库需要进行鉴权，<strong>经过一番摸索后，发现要在 git clone中指定username，才能成功下载代码。</strong></p><p>命令的格式如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> http://wuxinhong@code.cmschina.com.cn/zdcpkfz/recomsystem.git</span><br></pre></td></tr></table></figure><p><strong>本质上，是在原先的HTTP的地址中，增加了username</strong></p><p>原始的URL地址是：<code>http://code.cmschina.com.cn/zdcpkfz/recomsystem.git</code></p><h5 id="2-VSCode上库流程"><a href="#2-VSCode上库流程" class="headerlink" title="2 VSCode上库流程"></a>2 VSCode上库流程</h5><h6 id="1）打开git代码目录"><a href="#1）打开git代码目录" class="headerlink" title="1）打开git代码目录"></a>1）打开git代码目录</h6><p>下载完Git仓库后，会有一个文件夹<strong>.git</strong>生成，这个目录将会被<strong>VSCode</strong>识别。</p><h6 id="2）修改代码"><a href="#2）修改代码" class="headerlink" title="2）修改代码"></a>2）修改代码</h6><p>在VSCode中修改代码后，在工程中将会出现Change提示符号，如下图所示：</p><p><img src="http://pogngdcwy.bkt.clouddn.com/1553088323397e3koel23.png?imageslim" alt="paste image"></p><h6 id="3）提交修改"><a href="#3）提交修改" class="headerlink" title="3）提交修改"></a>3）提交修改</h6><p>提交修改时，可以直接点击提交按钮，会提示添加Commit信息。然后再点击<code>...</code>push到对应的分支，如下图所示：</p><p><img src="http://pogngdcwy.bkt.clouddn.com/1553146529100fuzx5zg5.png?imageslim" alt="paste image"></p><h5 id="3-Pull-Request的玩法"><a href="#3-Pull-Request的玩法" class="headerlink" title="3 Pull Request的玩法"></a>3 Pull Request的玩法</h5><p>首先需要认识到：<strong>git clone下载下来的是全套的代码，包含所有的分支</strong>，因此可以使用<strong>git checkout branch</strong> 来进行分支的切换。</p><p>因此，在开发时，切换到dev分支，并且将代码上库到dev分支。然后在GitHub中提起Pull Request。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;VSCode与Git联合使用方法&quot;&gt;&lt;a href=&quot;#VSCode与Git联合使用方法&quot; class=&quot;headerlink&quot; title=&quot;VSCode与Git联合使用方法&quot;&gt;&lt;/a&gt;VSCode与Git联合使用方法&lt;/h4&gt;&lt;h5 id=&quot;1-Git的安装&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Python 调试技巧</title>
    <link href="http://yoursite.com/2019/03/20/Python-%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7/"/>
    <id>http://yoursite.com/2019/03/20/Python-调试技巧/</id>
    <published>2019-03-20T05:28:57.000Z</published>
    <updated>2019-03-20T05:29:03.019Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Python-调试技巧"><a href="#Python-调试技巧" class="headerlink" title="Python 调试技巧"></a>Python 调试技巧</h4><h5 id="1-pdb-单步跟踪"><a href="#1-pdb-单步跟踪" class="headerlink" title="1 pdb 单步跟踪"></a>1 pdb 单步跟踪</h5><p>类似Go/C语言的gdb，python也存在一个类似的单步调试器：pdb。</p><p>可以使用类似的用法，对Python程序进行调试。</p><p>启动pdb调试命令：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m pdb file.py</span><br></pre></td></tr></table></figure><h5 id="2-python-函数原型"><a href="#2-python-函数原型" class="headerlink" title="2 python 函数原型"></a>2 python 函数原型</h5><p>C语言系统API，在Linux下，可以使用<code>man</code> 命令快速的查看函数的原型，例如：</p><p><code>man strcpy</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">STRCPY(<span class="number">3</span>)                                                                                                Linux Programmer'<span class="function">s Manual                                                                                               <span class="title">STRCPY</span><span class="params">(<span class="number">3</span>)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">NAME</span></span><br><span class="line">       strcpy, strncpy - copy a string</span><br><span class="line"></span><br><span class="line">SYNOPSIS</span><br><span class="line">       <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">char</span> *<span class="title">strcpy</span><span class="params">(<span class="keyword">char</span> *dest, <span class="keyword">const</span> <span class="keyword">char</span> *src)</span></span>;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">char</span> *<span class="title">strncpy</span><span class="params">(<span class="keyword">char</span> *dest, <span class="keyword">const</span> <span class="keyword">char</span> *src, <span class="keyword">size_t</span> n)</span></span>;</span><br><span class="line"></span><br><span class="line">DESCRIPTION</span><br><span class="line">       The  strcpy()  function  copies  the  string pointed to by src, including the terminating null byte ('\0'), to the buffer pointed to by dest.  The strings may not overlap, and the destination string dest must be large enough to</span><br><span class="line">       receive the copy.  Beware of buffer overruns!  (See BUGS.)</span><br><span class="line"></span><br><span class="line">       The strncpy() function is similar, except that at most n bytes of src are copied.  Warning: If there is no null byte among the first n bytes of src, the string placed in dest will not be null-terminated.</span><br><span class="line"></span><br><span class="line">       If the length of src is less than n, <span class="built_in">strncpy</span>() writes additional null bytes to dest to ensure that a total of n bytes are written.</span><br><span class="line"></span><br><span class="line">       A simple implementation of strncpy() might be:</span><br><span class="line"></span><br><span class="line">           <span class="keyword">char</span> *</span><br><span class="line">           <span class="built_in">strncpy</span>(<span class="keyword">char</span> *dest, <span class="keyword">const</span> <span class="keyword">char</span> *src, <span class="keyword">size_t</span> n)</span><br><span class="line">           &#123;</span><br><span class="line">               <span class="keyword">size_t</span> i;</span><br><span class="line"></span><br><span class="line">               <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n &amp;&amp; src[i] != <span class="string">'\0'</span>; i++)</span><br><span class="line">                   dest[i] = src[i];</span><br><span class="line">               <span class="keyword">for</span> ( ; i &lt; n; i++)</span><br><span class="line">                   dest[i] = <span class="string">'\0'</span>;</span><br><span class="line"></span><br><span class="line">               <span class="keyword">return</span> dest;</span><br><span class="line">           &#125;</span><br></pre></td></tr></table></figure><p>​    在Python语言系统中，使用：<code>pydoc</code></p><p>​    例如，想查看json的dumps接口原型，可以输入：<code>pydoc json.dumps</code></p><p>​    会有如下的提示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">Help on function dumps <span class="keyword">in</span> json:</span><br><span class="line"></span><br><span class="line">json.dumps = dumps(obj, skipkeys=<span class="literal">False</span>, ensure_ascii=<span class="literal">True</span>, check_circular=<span class="literal">True</span>, allow_nan=<span class="literal">True</span>, cls=<span class="literal">None</span>, indent=<span class="literal">None</span>, separators=<span class="literal">None</span>, encoding=<span class="string">'utf-8'</span>, default=<span class="literal">None</span>, sort_keys=<span class="literal">False</span>, **kw)</span><br><span class="line">    Serialize ``obj`` to a JSON formatted ``str``.</span><br><span class="line">    </span><br><span class="line">    If ``skipkeys`` <span class="keyword">is</span> true then ``dict`` keys that are <span class="keyword">not</span> basic types</span><br><span class="line">    (``str``, ``unicode``, ``int``, ``long``, ``float``, ``bool``, ``<span class="literal">None</span>``)</span><br><span class="line">    will be skipped instead of raising a ``TypeError``.</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    If ``ensure_ascii`` <span class="keyword">is</span> false, all non-ASCII characters are <span class="keyword">not</span> escaped, <span class="keyword">and</span></span><br><span class="line">    the <span class="keyword">return</span> value may be a ``unicode`` instance. See ``dump`` <span class="keyword">for</span> details.</span><br><span class="line">    </span><br><span class="line">    If ``check_circular`` <span class="keyword">is</span> false, then the circular reference check</span><br><span class="line">    <span class="keyword">for</span> container types will be skipped <span class="keyword">and</span> a circular reference will</span><br><span class="line">    result <span class="keyword">in</span> an ``OverflowError`` (<span class="keyword">or</span> worse).</span><br><span class="line">    </span><br><span class="line">    If ``allow_nan`` <span class="keyword">is</span> false, then it will be a ``ValueError`` to</span><br><span class="line">    serialize out of range ``float`` values (``nan``, ``inf``, ``-inf``) <span class="keyword">in</span></span><br><span class="line">    strict compliance of the JSON specification, instead of using the</span><br><span class="line">    JavaScript equivalents (``NaN``, ``Infinity``, ``-Infinity``).</span><br><span class="line">    </span><br><span class="line">    If ``indent`` <span class="keyword">is</span> a non-negative integer, then JSON array elements <span class="keyword">and</span></span><br><span class="line">    object members will be pretty-printed <span class="keyword">with</span> that indent level. An indent</span><br><span class="line">    level of <span class="number">0</span> will only insert newlines. ``<span class="literal">None</span>`` <span class="keyword">is</span> the most compact</span><br><span class="line">    representation.  Since the default item separator <span class="keyword">is</span> ``<span class="string">', '</span>``,  the</span><br><span class="line">    output might include trailing whitespace when ``indent`` <span class="keyword">is</span> specified.</span><br><span class="line">    You can use ``separators=(<span class="string">','</span>, <span class="string">': '</span>)`` to avoid this.</span><br><span class="line">    </span><br><span class="line">    If ``separators`` <span class="keyword">is</span> an ``(item_separator, dict_separator)`` tuple</span><br><span class="line">    then it will be used instead of the default ``(<span class="string">', '</span>, <span class="string">': '</span>)`` separators.</span><br><span class="line">    ``(<span class="string">','</span>, <span class="string">':'</span>)`` <span class="keyword">is</span> the most compact JSON representation.</span><br><span class="line">    </span><br><span class="line">    ``encoding`` <span class="keyword">is</span> the character encoding <span class="keyword">for</span> str instances, default <span class="keyword">is</span> UTF<span class="number">-8.</span></span><br><span class="line">    </span><br><span class="line">    ``default(obj)`` <span class="keyword">is</span> a function that should <span class="keyword">return</span> a serializable version</span><br><span class="line">    of obj <span class="keyword">or</span> <span class="keyword">raise</span> TypeError. The default simply raises TypeError.</span><br><span class="line">    </span><br><span class="line">    If *sort_keys* <span class="keyword">is</span> true (default: ``<span class="literal">False</span>``), then the output of</span><br><span class="line">    dictionaries will be sorted by key.</span><br><span class="line">    </span><br><span class="line">    To use a custom ``JSONEncoder`` subclass (e.g. one that overrides the</span><br><span class="line">    ``.default()`` method to serialize additional types), specify it <span class="keyword">with</span></span><br><span class="line">    the ``cls`` kwarg; otherwise ``JSONEncoder`` <span class="keyword">is</span> used.</span><br></pre></td></tr></table></figure><h5 id="3-python-包查找库"><a href="#3-python-包查找库" class="headerlink" title="3 python 包查找库"></a>3 python 包查找库</h5><p>​    类似于Go语言的Godoc，Python也有类似的网站：<a href="https://pypi.org/" target="_blank" rel="noopener">https://pypi.org/</a></p><p>​    <img src="http://pogngdcwy.bkt.clouddn.com/1553059601588213uj3k1.png?imageslim" alt="paste image"></p><p>​    </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;Python-调试技巧&quot;&gt;&lt;a href=&quot;#Python-调试技巧&quot; class=&quot;headerlink&quot; title=&quot;Python 调试技巧&quot;&gt;&lt;/a&gt;Python 调试技巧&lt;/h4&gt;&lt;h5 id=&quot;1-pdb-单步跟踪&quot;&gt;&lt;a href=&quot;#1-pdb-单
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Golang 抓包分析MySQL的数据传输过程</title>
    <link href="http://yoursite.com/2019/03/19/Untitled/"/>
    <id>http://yoursite.com/2019/03/19/Untitled/</id>
    <published>2019-03-19T06:20:43.000Z</published>
    <updated>2019-03-19T06:26:41.833Z</updated>
    
    <content type="html"><![CDATA[<h3 id="抓包分析MySQL的数据传输过程"><a href="#抓包分析MySQL的数据传输过程" class="headerlink" title="抓包分析MySQL的数据传输过程"></a>抓包分析MySQL的数据传输过程</h3><h4 id="1）一段完整的data-sql代码"><a href="#1）一段完整的data-sql代码" class="headerlink" title="1）一段完整的data/sql代码"></a>1）一段完整的data/sql代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"database/sql"</span></span><br><span class="line">    _ <span class="string">"github.com/go-sql-driver/mysql"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    dbName := <span class="string">"root:root@tcp(192.168.133.128:3306)/monitor?charset=utf8"</span></span><br><span class="line">    dbConn, err := sql.Open(<span class="string">"mysql"</span>, dbName)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(err.Error())</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    stmtIn, err := dbConn.Prepare(<span class="string">"Select count(*) from process"</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</span><br><span class="line">        fmt.Println(<span class="string">"Prepare Fail"</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">"Prepare Success"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> count <span class="keyword">int</span></span><br><span class="line">    err  = stmtIn.QueryRow().Scan(&amp;count)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &amp;&amp; err != sql.ErrNoRows &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">"count = "</span>,count)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">defer</span> stmtIn.Close()</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">D:\workspace\go\src\tryme\sql</span><br><span class="line">λ go run .</span><br><span class="line">Prepare Success</span><br><span class="line">count =  2</span><br></pre></td></tr></table></figure><h4 id="2）接口API规范文档"><a href="#2）接口API规范文档" class="headerlink" title="2）接口API规范文档"></a>2）接口API规范文档</h4><h4 id="3）报文交互"><a href="#3）报文交互" class="headerlink" title="3）报文交互"></a>3）报文交互</h4><p>整个过程的报文截图：</p><p><img src="http://poe83fdgu.bkt.clouddn.com/%E4%BA%A4%E4%BA%92%E6%8A%A5%E6%96%87.png" alt="MySQL报文交互"></p><ol><li><p>报文序号：1~3</p><p>经典的TCP连接建立过程，需要经过三次握手。</p><p>说明MySQL建立的是TCP的连接。</p></li><li><p>报文序号：4~7</p><p> 第4号报文，MySQL服务器向客户端发送了一个问候，需要客户端验明正身。</p><p> <img src="http://poe83fdgu.bkt.clouddn.com/%E6%9C%8D%E5%8A%A1%E7%AB%AF%E9%89%B4%E6%9D%83%E8%A6%81%E6%B1%82.png" alt="鉴权要求"></p></li></ol><p>第5号报文，Client端将账号与密码以及请求的数据库名发送到服务端，其中密码是加密传输的过程。</p><p><img src="http://poe83fdgu.bkt.clouddn.com/%E4%BC%A0%E8%BE%93%E8%B4%A6%E5%8F%B7%E4%B8%8E%E5%AF%86%E7%A0%81.png" alt="传输账号与密码"></p><p>第7号报文表示验证通过。</p><ol start="3"><li><p>报文序号：8~11</p><p>第8号报文设置读取的编码格式，此处为UTF-8。</p><p>第10号报文是执行Prepare Command的过程，向服务端请求连接准备，此时服务端将从连接池中选择1个连接。</p><p><img src="http://poe83fdgu.bkt.clouddn.com/Prepare%E8%AF%B7%E6%B1%82%E6%8A%A5%E6%96%87.png" alt="Prepare请求报文"></p><p>第11号报文，服务端将选择好的连接信息（连接池ID）发送到客户端，此时客户端可以使用这个连接池进行数据库的操作。</p><p><img src="http://poe83fdgu.bkt.clouddn.com/Prepare%E5%93%8D%E5%BA%94.png" alt="Prepare响应"></p><ol start="4"><li><p>报文序号：12~13</p><p>报文12，客户端根据拿到的数据库连接，执行响应的数据库操作：</p><p><img src="http://poe83fdgu.bkt.clouddn.com/Execute%E6%89%A7%E8%A1%8C%E8%AF%B7%E6%B1%82.png" alt="Execute请求报文"></p><p>报文13，服务端将查询结果返回到客户端。</p><p><img src="http://pogngdcwy.bkt.clouddn.com/1552976689105wnudmnhb.png?imageslim" alt="Exec执行结果"></p></li></ol></li></ol><h4 id="4）总结"><a href="#4）总结" class="headerlink" title="4）总结"></a>4）总结</h4><ol><li>MySQL 在传输时使用的是TCP连接，通过三次握手建立连接。</li><li>MySQL在执行SQL过程中，使用的是MySQL自有协议，且为应用层协议。</li><li>真正与数据库连接是从<strong>Prepare</strong>之后开始的，而不是<code>sql.Open</code>。</li><li>Prepare真正意图是从MySQL中申请到一个数据库连接。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;抓包分析MySQL的数据传输过程&quot;&gt;&lt;a href=&quot;#抓包分析MySQL的数据传输过程&quot; class=&quot;headerlink&quot; title=&quot;抓包分析MySQL的数据传输过程&quot;&gt;&lt;/a&gt;抓包分析MySQL的数据传输过程&lt;/h3&gt;&lt;h4 id=&quot;1）一段完整的da
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Golang json &amp;&amp; mysql Data Transfer</title>
    <link href="http://yoursite.com/2019/03/19/Golang-json-mysql-Data-Transfer/"/>
    <id>http://yoursite.com/2019/03/19/Golang-json-mysql-Data-Transfer/</id>
    <published>2019-03-19T06:02:33.000Z</published>
    <updated>2019-03-19T08:42:20.003Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Golang-json-amp-amp-mysql-Data-Transfer"><a href="#Golang-json-amp-amp-mysql-Data-Transfer" class="headerlink" title="Golang: json &amp;&amp; mysql Data Transfer"></a>Golang: json &amp;&amp; mysql Data Transfer</h4><h5 id="1-数据流转图"><a href="#1-数据流转图" class="headerlink" title="1 数据流转图"></a>1 数据流转图</h5><p>​    在常见的MVC的框架中，涉及到前端UI，后台服务，数据库存储三大块。从编程语言上看，前端使用JavaScript下发JSON数据，后台使用Golang（本项目是Golang）接收前端下发的数据，并将数据存储到MySQL的数据库中。</p><p>​    整个数据流转关系如下：</p><p>​    <img src="http://pogngdcwy.bkt.clouddn.com/json%E4%B8%8Emysql%E7%9A%84%E4%BD%BF%E7%94%A8.png" alt="数据流转"></p><h5 id="2-Client-To-Server"><a href="#2-Client-To-Server" class="headerlink" title="2 Client To Server"></a>2 Client To Server</h5><p>​    UI 层使用的是JSON，支持数字、字符串、布尔型。JSON本身就是JavaScript Object，因此在JS端，<strong>所有的数据都是Number、Boolean、String 这三种类型。</strong></p><p>​    比较幸运，这几种数据类型在常规的编程语言中，都是包含的，如Golang。那么如何来接收从UI端下发的JSON Object，此时需要在Golang中创建一个对应的结构体。</p><ul><li><p><strong>创建1个Struct，建立成员变量名与json目标key的映射关系</strong></p><p>JS端下发如下一段JSON：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"network_id"</span>:<span class="string">"1"</span>,</span><br><span class="line">    <span class="attr">"network_src_ip"</span>:<span class="string">"127.0.0.1"</span>,</span><br><span class="line">    <span class="attr">"network_dst_ip"</span>:<span class="string">"127.0.0.1"</span>,</span><br><span class="line">    <span class="attr">"network_dst_port"</span>:<span class="number">3306</span>,</span><br><span class="line">    <span class="attr">"network_desc"</span>:<span class="string">"MySQL"</span>,</span><br><span class="line">    <span class="attr">"network_status"</span>:<span class="number">1</span>,</span><br><span class="line">    <span class="attr">"network_time_available"</span>:<span class="string">"2018-07-20T14:42:26+08:00"</span>,</span><br><span class="line">    <span class="attr">"network_time_unavailable"</span>:<span class="string">"1970-01-01T08:00:01+08:00"</span>,</span><br><span class="line">    <span class="attr">"network_group"</span>:<span class="number">0</span>,</span><br><span class="line">    <span class="attr">"network_alarm_lasttime"</span>:<span class="string">"1970-01-01T08:00:01+08:00"</span>,</span><br><span class="line">    <span class="attr">"network_failed_cnt"</span>:<span class="number">0</span>,</span><br><span class="line">    <span class="attr">"network_disabled"</span>:<span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在Golang中建立如下的结构体，<strong>为每个接口体成员打上Tag：JSON</strong></p><p><strong>Tag中的标签，则表示在JSON中的key</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> PortMonitor <span class="keyword">struct</span> &#123;</span><br><span class="line">ID        <span class="keyword">string</span>    <span class="string">`json:"network_id"`</span></span><br><span class="line">SrcIP     <span class="keyword">string</span>    <span class="string">`json:"network_src_ip"`</span></span><br><span class="line">DstIP     <span class="keyword">string</span>    <span class="string">`json:"network_dst_ip"`</span></span><br><span class="line">DstPort   <span class="keyword">int</span>       <span class="string">`json:"network_dst_port"`</span></span><br><span class="line">Desc      <span class="keyword">string</span>    <span class="string">`json:"network_desc"`</span></span><br><span class="line">Status    <span class="keyword">int</span>       <span class="string">`json:"network_status"`</span></span><br><span class="line">TimeOK    time.Time <span class="string">`json:"network_time_available"`</span></span><br><span class="line">TimeFail  time.Time <span class="string">`json:"network_time_unavailable"`</span></span><br><span class="line">Group     <span class="keyword">int</span>       <span class="string">`json:"network_group"`</span></span><br><span class="line">TimeAlarm time.Time <span class="string">`json:"network_alarm_lasttime"`</span></span><br><span class="line">FailCnt   <span class="keyword">int</span>       <span class="string">`json:"network_failed_cnt"`</span></span><br><span class="line">Disable   <span class="keyword">bool</span>      <span class="string">`json:"network_disabled"`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong>json.Unmarshal 完成转换</strong></p><p>数据到达服务端时的格式是：[]byte</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CreateProcMonitor</span><span class="params">(w http.ResponseWriter, r *http.Request, p httprouter.Params)</span></span> &#123;</span><br><span class="line">logger.I(<span class="string">"call CreateProcMonitor"</span>)</span><br><span class="line">res, _ := ioutil.ReadAll(r.Body)</span><br><span class="line">uBody := &amp;process.ProcessMonitor&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err := json.Unmarshal(res, uBody); err != <span class="literal">nil</span> &#123;</span><br><span class="line">common.SendErrorResponse(w, common.ErrorRequestBodyParseFailed)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err := process.DBAddProcMonitorInfo(uBody); err != <span class="literal">nil</span> &#123;</span><br><span class="line">common.SendErrorResponse(w, common.ErrorDBError)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">common.SendNormalResponse(w, <span class="string">"Create ProMonitor Info Success"</span>, http.StatusCreated)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用函数<code>json:Unmarshal</code>则可以完成JSON结构体向Struct结构体的转换，转换时按照Tag将JSON中的key与Struct中的成员变量名称相对应。</strong></p></li></ul><h5 id="3-Server-To-DB"><a href="#3-Server-To-DB" class="headerlink" title="3 Server To DB"></a>3 Server To DB</h5><p>  从Web服务端调用数据库API执行写库的操作，关键的函数为：</p>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">sqlClause := <span class="string">`INSERT INTO network (network_id, network_src_ip, network_dst_ip, network_dst_port, network_desc,</span></span><br><span class="line"><span class="string">             network_time_available, network_disabled) VALUES (?, ?, ?, ?, ?, ?, ?)`</span></span><br><span class="line"></span><br><span class="line">logger.I(<span class="string">"sqlClause Insert:%s"</span>, sqlClause)</span><br><span class="line">stmtIns, err = dbConn.Prepare(sqlClause)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_, err = stmtIns.Exec(portInfo.ID, portInfo.SrcIP, portInfo.DstIP, portInfo.DstPort, portInfo.Desc, portInfo.TimeOK, portInfo.Disable)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  核心函数为：<code>stmtIns.Exec</code></p><p>  <strong>通过实验，证明Exec的参数传递时，支持传统的整型，布尔型，String、time.Time类型等。</strong></p><h5 id="4-DB-To-Server"><a href="#4-DB-To-Server" class="headerlink" title="4 DB To Server"></a>4 DB To Server</h5><p>  在数据库中存储的数据，通过接口读取到Go语言中，常用代码如下：</p>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">DBGetPortMonitorList</span><span class="params">(stmt <span class="keyword">string</span>)</span> <span class="params">([]*PortMonitor, error)</span></span> &#123;</span><br><span class="line">logger.T(<span class="string">"Enter Func: DBGetPortMonitorList"</span>)</span><br><span class="line">stmtOut, err := dbConn.Prepare(stmt)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> res []*PortMonitor</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> res, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rows, err := stmtOut.Query()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> res, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">defer</span> stmtOut.Close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> rows.Next() &#123;</span><br><span class="line"><span class="keyword">var</span> network_id, network_src_ip, network_dst_ip, network_desc <span class="keyword">string</span></span><br><span class="line"><span class="keyword">var</span> network_dst_port, network_status, network_failed_cnt <span class="keyword">int</span></span><br><span class="line"><span class="keyword">var</span> network_time_available, network_time_unavailable, network_alarm_lasttime time.Time</span><br><span class="line">        <span class="keyword">var</span> network_disabled <span class="keyword">bool</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err := rows.Scan(&amp;network_id, &amp;network_src_ip, &amp;network_dst_ip, &amp;network_dst_port, &amp;network_desc, &amp;network_status,</span><br><span class="line">&amp;network_time_available, &amp;network_time_unavailable, &amp;network_alarm_lasttime, &amp;network_failed_cnt, &amp;network_disabled); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> res, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pm := &amp;PortMonitor&#123;</span><br><span class="line">ID:        network_id,</span><br><span class="line">SrcIP:     network_src_ip,</span><br><span class="line">DstIP:     network_dst_ip,</span><br><span class="line">DstPort:   network_dst_port,</span><br><span class="line">Desc:      network_desc,</span><br><span class="line">Status:    network_status,</span><br><span class="line">TimeOK:    network_time_available,</span><br><span class="line">TimeFail:  network_time_unavailable,</span><br><span class="line">TimeAlarm: network_alarm_lasttime,</span><br><span class="line">FailCnt:   network_failed_cnt,</span><br><span class="line">Disable:   network_disabled,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">res = <span class="built_in">append</span>(res, pm)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> res, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  获取数据的关键接口是：<code>rows.Scan</code></p><p>  <strong>通过实验，证明Scan的参数传递时，支持传统的整型，布尔型，String、time.Time类型等。</strong></p><h5 id="4-Server-To-Client"><a href="#4-Server-To-Client" class="headerlink" title="4 Server To Client"></a>4 Server To Client</h5><p>  从Golang中将数据返回到客户端，如下代码所示：</p>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetProcMonitorList</span><span class="params">(w http.ResponseWriter, r *http.Request, p httprouter.Params)</span></span> &#123;</span><br><span class="line">logger.I(<span class="string">"call GetProcMonitorList"</span>)</span><br><span class="line"></span><br><span class="line">stmt := <span class="string">`SELECT id, process_ip, process_name, process_cnt, process_execmd, process_name_find,process_enable_lanch,</span></span><br><span class="line"><span class="string">        process_enable_alarm,process_alarm_time,process_groupid,process_switch FROM process`</span></span><br><span class="line">pm, err := process.DBGetProcMonitorList(stmt)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">logger.E(<span class="string">"Error When GetProcMonitorList"</span>)</span><br><span class="line">common.SendErrorResponse(w, common.ErrorDBError)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> resp, err := json.Marshal(pm); err != <span class="literal">nil</span> &#123;</span><br><span class="line">common.SendErrorResponse(w, common.ErrorInternalFaults)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">common.SendNormalResponse(w, <span class="keyword">string</span>(resp), <span class="number">200</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  核心的函数是：<code>json.Marshal</code></p><p>  这个函数将Struct结构体转变成JSON encode。</p><p>  <strong>通过实验，证明json.Marshal转换后，传递到前端支持传统的整型，布尔型，String、time.Time类型等。</strong></p><h5 id="5-time-Time的使用注意事项"><a href="#5-time-Time的使用注意事项" class="headerlink" title="5 time.Time的使用注意事项"></a>5 time.Time的使用注意事项</h5><p>  对于MySQL的驱动而言，使用Scan方法默认读取到的是<code>[]byte</code></p><p>  如果要使得MySQL驱动支持time.Time，需要设置DSN（Data Source Name）parseTime=true。    </p><p>  格式如下：</p><p>  <code>source=root:root@tcp(192.168.133.128:3306)/monitor?loc=Local&amp;parseTime=true&amp;charset=utf8</code></p><blockquote><p>The default internal output type of MySQL <code>DATE</code> and <code>DATETIME</code> values is <code>[]byte</code> which allows you to scan the value into a <code>[]byte</code>, <code>string</code> or <code>sql.RawBytes</code> variable in your program.</p><p>However, many want to scan MySQL <code>DATE</code> and <code>DATETIME</code> values into <code>time.Time</code> variables, which is the logical equivalent in Go to <code>DATE</code> and <code>DATETIME</code> in MySQL. You can do that by changing the internal output type from <code>[]byte</code> to <code>time.Time</code> with the DSN parameter <code>parseTime=true</code>. You can set the default <a href="https://golang.org/pkg/time/#Location" target="_blank" rel="noopener"><code>time.Time</code> location</a> with the <code>loc</code> DSN parameter.</p><p><strong>Caution:</strong> As of Go 1.1, this makes <code>time.Time</code> the only variable type you can scan <code>DATE</code> and <code>DATETIME</code> values into. This breaks for example <a href="https://github.com/go-sql-driver/mysql/wiki/Examples#rawbytes" target="_blank" rel="noopener"><code>sql.RawBytes</code> support</a>.</p><p>Alternatively you can use the <a href="https://godoc.org/github.com/go-sql-driver/mysql#NullTime" target="_blank" rel="noopener"><code>NullTime</code></a> type as the scan destination, which works with both <code>time.Time</code> and <code>string</code> / <code>[]byte</code>.</p></blockquote><h5 id="6-总结"><a href="#6-总结" class="headerlink" title="6 总结"></a>6 总结</h5><p>  从接口调用的角度：</p><p>  <img src="http://pogngdcwy.bkt.clouddn.com/%E6%8E%A5%E5%8F%A3%E7%9A%84%E8%BD%AC%E6%8D%A2.png" alt="接口转换"></p><p>  在设计golang中的结构体时，按照常规的字段的类型声明就可以。<br>  另外，对于time.Time数据类型，要注意NULL默认值，如果数据库中存储的值为NULL，则会提示如下的错误：<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sql: Scan error on column index 6, name <span class="string">"network_time_available"</span>: unsupported Scan, storing driver.Value <span class="built_in">type</span> &lt;nil&gt; into <span class="built_in">type</span> *time.Time</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;Golang-json-amp-amp-mysql-Data-Transfer&quot;&gt;&lt;a href=&quot;#Golang-json-amp-amp-mysql-Data-Transfer&quot; class=&quot;headerlink&quot; title=&quot;Golang: json &amp;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Qiniu Image Upload</title>
    <link href="http://yoursite.com/2019/03/16/hello-world/"/>
    <id>http://yoursite.com/2019/03/16/hello-world/</id>
    <published>2019-03-16T13:50:00.000Z</published>
    <updated>2019-03-21T05:35:29.761Z</updated>
    
    <content type="html"><![CDATA[<h4 id="this-article-is-for-uploading-image"><a href="#this-article-is-for-uploading-image" class="headerlink" title="this article is for uploading image"></a>this article is for uploading image</h4><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><p><img src="http://pogngdcwy.bkt.clouddn.com/1552976689105wnudmnhb.png?imageslim" alt="paste image"><br><img src="http://pogngdcwy.bkt.clouddn.com/1553059601588213uj3k1.png?imageslim" alt="paste image"><br><img src="http://pogngdcwy.bkt.clouddn.com/1553087522877741tqn2j.png?imageslim" alt="paste image"><br><img src="http://pogngdcwy.bkt.clouddn.com/1553088323397e3koel23.png?imageslim" alt="paste image"><br><img src="http://pogngdcwy.bkt.clouddn.com/1553146529100fuzx5zg5.png?imageslim" alt="paste image"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;this-article-is-for-uploading-image&quot;&gt;&lt;a href=&quot;#this-article-is-for-uploading-image&quot; class=&quot;headerlink&quot; title=&quot;this article is for up
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hexo搭建个人博客站点のSpecil Tips</title>
    <link href="http://yoursite.com/2019/03/16/test-my-site/"/>
    <id>http://yoursite.com/2019/03/16/test-my-site/</id>
    <published>2019-03-16T06:14:28.000Z</published>
    <updated>2019-03-19T21:58:43.829Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Hexo搭建个人博客站点のSpecil-Tips"><a href="#Hexo搭建个人博客站点のSpecil-Tips" class="headerlink" title="Hexo搭建个人博客站点のSpecil Tips"></a>Hexo搭建个人博客站点のSpecil Tips</h3><h4 id="1-序言"><a href="#1-序言" class="headerlink" title="1 序言"></a>1 序言</h4><p>​    Hexo是非常流行的个人站点博客引擎，易学易学，社区教程也非常丰富。</p><p>​    搭建的教程基本上也是属于手把手级别的，很容易上手。</p><p>​    本文主要汇总在搭建过程中，自认为比较重要的事项进行记录，方便后续查看。</p><p>​    关键点：</p><ul><li>本文实际采用的网站使用GitHub托管</li><li>hexo-admin-qiniu需要结合七牛图床使用</li><li>域名解析与CNAME配置文件相结合</li></ul><h4 id="2-流程介绍"><a href="#2-流程介绍" class="headerlink" title="2 流程介绍"></a>2 流程介绍</h4><p>​    在搭建过程中，主要是参照如下链接：</p><p>​    其中重点参考了从“获得个人网站域名”到“绑定域名”这段过程，主题采用的是BlueLake。</p><p>​    从选用蓝湖主题开始，参考的是如下的步骤：</p><h4 id="3-Special-Tips"><a href="#3-Special-Tips" class="headerlink" title="3 Special Tips"></a>3 Special Tips</h4><h5 id="1-站点服务器选择"><a href="#1-站点服务器选择" class="headerlink" title="(1) 站点服务器选择"></a>(1) 站点服务器选择</h5><p>​    国内已经有比较多的云服务器可以选择，如阿里云，腾讯云，华为云等，但是需要注意：如果使用国内的服务器进行网站的搭建，需要对服务器进行许可认证，</p><p>​    即ICP备案。也可以使用国外的服务器，不需要对服务器进行备案。</p><p>​    本文采用的是vultr服务器，月租相对比较便宜，目前看运行还是比较稳定的。<img src="http://pogngdcwy.bkt.clouddn.com/1552749792980wg5ohkuv.png?imageslim" alt="vultr服务器"></p><h5 id="2-每次Deploy时都需要输入密码"><a href="#2-每次Deploy时都需要输入密码" class="headerlink" title="(2) 每次Deploy时都需要输入密码"></a>(2) 每次Deploy时都需要输入密码</h5><p>​    按照教程，在GitHub的SSH Key的设置界面，将服务器生成的公钥部署完毕。在真正部署时，还是需要输入密码，操作起来非常不便。</p><p>​    查阅资料后，将根config文件的repo属性进行了如下的更改：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">  repo:</span> <span class="string">git@github.com:XinhongWu/xinhongwu.github.io.git</span></span><br><span class="line"><span class="attr">  branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>​    配置完成后，则可以不需要输入密码，即可完成GitHub的推送。</p><h5 id="3-域名解析CNAME"><a href="#3-域名解析CNAME" class="headerlink" title="(3) 域名解析CNAME"></a>(3) 域名解析CNAME</h5><p>​    由于网站托管到GitHub上，因此可以使用 <code>github.io</code>格式的网址对网站进行访问。</p><p>​    对于新申请的域名，需要做一个域名解析的配置，详细配置如下：</p><p>​    <img src="http://pogngdcwy.bkt.clouddn.com/1552750792933lyckuak7.png?imageslim" alt="域名解析"></p><p>​    需要配置一个CNAME类型和A类型的解析方式。</p><p>​    光解析到GitHub地址还不够，必须要让GitHub能鉴权通过新注册的域名，因此，需要在博客的source目录下配置一个CNAME文件：</p><p>​    <img src="http://pogngdcwy.bkt.clouddn.com/1552750959901bpxv8n0a.png?imageslim" alt="cname文件"></p><p>​    最终会被解析到GitHub的如下位置：</p><p>​    <img src="http://pogngdcwy.bkt.clouddn.com/15527510899073dtrltn9.png?imageslim" alt="paste image"> </p><h5 id="4-中文标题乱码"><a href="#4-中文标题乱码" class="headerlink" title="(4) 中文标题乱码"></a>(4) 中文标题乱码</h5><p>​    原因是根config的文件编码格式不是UTF-8，导致推送后显示乱码。</p><p>​    <code>解决办法</code>：使用Notepad将其编码修改为UTF-8即可。</p><h5 id="5-设置第三方评论"><a href="#5-设置第三方评论" class="headerlink" title="(5) 设置第三方评论"></a>(5) 设置第三方评论</h5><p>​    在原生的代码中，有不少的博客评论系统可以选择，如下所示：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Cmments</span></span><br><span class="line"><span class="attr">comment:</span></span><br><span class="line"><span class="attr">  duoshuo:</span> <span class="comment">#chaooo ## duoshuo_shortname</span></span><br><span class="line"><span class="attr">  disqus:</span> <span class="comment">## disqus_shortname</span></span><br><span class="line"><span class="attr">  livere:</span> <span class="string">MTAyMC80MzIxNC8xOTc2MA==</span>  <span class="comment">## 来必力(data-uid)</span></span><br><span class="line"><span class="attr">  uyan:</span> <span class="comment">## 友言(uid)</span></span><br><span class="line"><span class="attr">  cloudTie:</span> <span class="comment">## 网易云跟帖(productKey)</span></span><br><span class="line"><span class="attr">  changyan:</span> <span class="comment">## 畅言需在下方配置两个参数，此处不填。</span></span><br><span class="line"><span class="attr">    appid:</span> <span class="comment">## 畅言(appid)</span></span><br><span class="line"><span class="attr">    appkey:</span> <span class="comment">##畅言(appkey)</span></span><br></pre></td></tr></table></figure><p>​    实际发现网易云跟帖已经停止服务了，畅言在申请时需要有网站的备案号，因此本文实际使用的是来必力。</p><p>​    （国外的服务器，不需要在国内备案，畅言可以尝试将没有申请过的备案号输入后申请）。</p><p>​    注意：来必力的ID可以在data-id中找到，如下所示：</p><p>​    <img src="http://pogngdcwy.bkt.clouddn.com/1552751536094rrpchtmm.png?imageslim" alt="paste image"></p><h5 id="6-设置代码高亮"><a href="#6-设置代码高亮" class="headerlink" title="(6) 设置代码高亮"></a>(6) 设置代码高亮</h5><p>​    实际写MD发现，代码并未按照自己的需求高亮，查找资料后发现，还需要额外再添加一个设置：</p><p>​    参考：<a href="http://www.mdslq.cn/archives/7266c682.html" target="_blank" rel="noopener">http://www.mdslq.cn/archives/7266c682.html</a></p><p>​    在主题config文件中，添加如下的一行：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">highlight_theme:</span> <span class="string">normal</span></span><br></pre></td></tr></table></figure><h5 id="7-七牛云图片直传"><a href="#7-七牛云图片直传" class="headerlink" title="(7) 七牛云图片直传"></a>(7) 七牛云图片直传</h5><p>​    七牛云为新用户提供10GB的云存储空间，足够使用，如果每次都将图片上传到七牛图床，然后粘贴链接，步骤非常的繁琐，</p><p>​    因此尝试寻找自动粘贴后变成链接的工具。</p><p>​    在知乎的问答中：</p><p>​    找到一个插件 hexo-admin-qiniu，可以方便图片的插入。可以按照如下的步骤来进行：</p><p>​        步骤1：在七牛中建立一个存储空间（Bucket），地区一定要选择<code>华东</code>！一定要选择<code>华东！一定要选择</code>华东！，如下所示：</p><p>​    <img src="http://pogngdcwy.bkt.clouddn.com/15527521861694j49ilyu.png?imageslim" alt="paste image"></p><p>​    图中的标记部分，在后序会用到：BucketHost</p><p>​    步骤2:安装 hexo-admin-qiniu插件</p><p>​    按照如下的教程，安装好插件：<a href="http://lazyboy.site/hexo-admin-qiniu/" target="_blank" rel="noopener">http://lazyboy.site/hexo-admin-qiniu/</a></p><p>​    在根config文件中，配置好七牛的图床，一个参考的配置如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">admin:</span></span><br><span class="line"><span class="attr">  qiniuCfg:</span></span><br><span class="line"><span class="attr">      imageslim:</span> <span class="literal">true</span>  <span class="comment"># 启动图片瘦身，仅华东区bucket可以使用</span></span><br><span class="line"><span class="attr">      AccessKey:</span> <span class="string">'qS-9v53dFGLjk8KVoyFpx587inU36quVSE4jl2-V'</span></span><br><span class="line"><span class="attr">      SecretKey:</span> <span class="string">'cM_HQcu17tXg8jVoP07i0UiuxifmiDmJSdUxZHvc'</span></span><br><span class="line"><span class="attr">      BucketName:</span> <span class="string">'blogmd'</span></span><br><span class="line"><span class="attr">      bucketHost:</span> <span class="string">'pogngdcwy.bkt.clouddn.com'</span></span><br></pre></td></tr></table></figure><p>​    </p><p>​    步骤3:启动服务，在Windows中可以直接访问hexo-admin。</p><p>​    在hexo-admin中，随意打开一篇文章，将图片粘贴，则会自动生成一个链接，在MarkDown编辑器中，直接粘贴此链接即可。</p><p>​    <img src="http://pogngdcwy.bkt.clouddn.com/1552752711545bpv5novc.png?imageslim" alt="paste image"></p><p>​    同时，在七牛的后台可以看到刚才操作中产生的图片：</p><p>​    <img src="http://pogngdcwy.bkt.clouddn.com/1552752785691zhloxezi.png?imageslim" alt="paste image"></p><h5 id="8-设置hexo-admin开机启动"><a href="#8-设置hexo-admin开机启动" class="headerlink" title="(8) 设置hexo-admin开机启动"></a>(8) 设置hexo-admin开机启动</h5><p>​    Ubuntu 18.10与早期的系统有差异，开机启动项目的管理，使用的是Systemd，不再是initd系统。</p><p>​        配置起来也比较简单，因为存在如下的功能：</p><blockquote><p>​    The <code>rc-local.service</code> already exists in systemd and the service file suggests that the <code>rc.local</code>, if it exists and is executable, <strong>gets pulled automatically into multi-user.target</strong></p></blockquote><p>​    也就是说rc.local将会被系统默认启动。参考链接：</p><p>​    <a href="https://askubuntu.com/questions/886620/how-can-i-execute-command-on-startup-rc-local-alternative-on-ubuntu-16-10" target="_blank" rel="noopener">https://askubuntu.com/questions/886620/how-can-i-execute-command-on-startup-rc-local-alternative-on-ubuntu-16-10</a></p><p>​    示例，在rc.local中添加如下的执行语句：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">cd</span> /home/cms/blog;hexo server &amp;</span><br><span class="line"><span class="built_in">exit</span> 0</span><br></pre></td></tr></table></figure><p>​    然后reboot，则会发现hexo程序在后台执行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@vultr:~<span class="comment"># ps -ef | grep hexo</span></span><br><span class="line">root       645     1  9 21:44 ?        00:00:02 hexo</span><br><span class="line">root       953   936  0 21:44 pts/0    00:00:00 grep --color=auto hexo</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Hexo搭建个人博客站点のSpecil-Tips&quot;&gt;&lt;a href=&quot;#Hexo搭建个人博客站点のSpecil-Tips&quot; class=&quot;headerlink&quot; title=&quot;Hexo搭建个人博客站点のSpecil Tips&quot;&gt;&lt;/a&gt;Hexo搭建个人博客站点のS
      
    
    </summary>
    
    
  </entry>
  
</feed>
